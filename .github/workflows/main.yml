name: CI

on:
  push:
    branches: [ master ]

# Açoes que serao executadas
jobs:
  # This workflow contains a single job called "build"
  build:
    # Será executado no ubuntu
    runs-on: ubuntu-latest
    
    # Cada passo de CI (Integração Contínua) vai percorrer
    steps:
      # Pegar a versão mais atualiza do codigo
      - uses: actions/checkout@v2
      
      # Setup do NodeJS
      - name: Setup Node.js environment
        uses: actions/setup-node@v1.4.3
        with:
          node-version: 12.x
        
     # Cache do YARN (Verifica se tem alguma dependência nova, senão busca do cache)
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
     
     # Instalando as dependências NPM/YARN
      - name: Install dependencies
        run: yarn
                 
      # Executar/Gerar a build
      - name: Run build
        run: yarn build
          
      # Copiar/Substituir código todo para Digital Ocean - action scp github (pesquisa google)
      - name: Copy dist to Digital Ocean
        uses: appleboy/scp-action@master
        # Aqui utiliza os Secrets criado anteriomente
        with:
         host: ${{ secrets.SSH_HOST }}
         username: ${{ secrets.SSH_USER }}
         port: ${{ secrets.SSH_PORT }}
         key: ${{ secrets.SSH_KEY }}
         # Caminho da origem (copia tudo)
         source: ".,!node_modules"
         # Para onde que será copiado (no caso nosso projeto na DO esta na pasta "app/node-deploy")
         # Sempre conferir dentro do servidor da DigitalOcean a origem das pasta do projeto
         target: "/app/node-depoly"
      
      # Executar "yarn" na Digital Ocean (Instalação das Dependências)
      # Para executar um comando dentro de um servidor SSH - action appleboy github (pesquisa google)
      - name: Install dependencies on Digital Ocean
        uses: appleboy/ssh-action@master
        with:
         host: ${{ secrets.SSH_HOST }}
         username: ${{ secrets.SSH_USER }}
         port: ${{ secrets.SSH_PORT }}
         key: ${{ secrets.SSH_KEY }}
         # script: é o que ele vai executar (acesso a pasta do projeto / execução YARN)
         script: | 
          cd ~/app/node-deploy
          yarn
          
      # Executar as migrations do TypeORM
      - name: Run migrations on Digital Ocean
        uses: appleboy/ssh-action@master
        with:
         host: ${{ secrets.SSH_HOST }}
         username: ${{ secrets.SSH_USER }}
         port: ${{ secrets.SSH_PORT }}
         key: ${{ secrets.SSH_KEY }}
         # script: é o que ele vai executar (acesso a pasta / execução migration)
         script: | 
          cd ~/app/node-deploy
          ./node_modules/.bin/typeorm migration:run
          
      # Restart no servidor NodeJS
      - name: Restart Digital Ocean NodeJS Server
        uses: appleboy/ssh-action@master
        with:
         host: ${{ secrets.SSH_HOST }}
         username: ${{ secrets.SSH_USER }}
         port: ${{ secrets.SSH_PORT }}
         key: ${{ secrets.SSH_KEY }}
         # Passar o nomeServicoDado ou id na hora da criçao do PM2
         script: pm2 restart nomeServicoDado

